libx264				X264_FRAME
x264/Encoder.c		x264_encoder_encode(x264_t *h, x264_nal_t **pp_nal, int *pi_nal, x264_picture_t *pic_in, x264_picture_t *pic_out )					
x264_encoder_encode	/* ------------------- Setup new frame from picture -------------------- */

//들어온 picture 있음
					if( pic_in != NULL )
						/* 1: Copy the picture to a frame and move it to a buffer */
							pic_in => fenc
							width, height, pts initialization
							
//quant_offset 초기화		x264_stack_align( x264_adaptive_quant_frame, h, fenc, pic_in->prop.quant_offsets )

						/* 2: Place the frame into the queue for its slice type decision */
							x264_lookahead_put_frame( h, fenc );
					else //들어온 picture 없을때 처리

					 h->i_frame++;

					/* 3: The picture is analyzed in the lookahead */
						if( !h->frames.current[0] )
							x264_lookahead_get_frames( h );

						if( !h->frames.current[0] && x264_lookahead_is_empty( h ) )
							return x264_encoder_frame_end( thread_oldest, thread_current, pp_nal, pi_nal, pic_out );

					/* ------------------- Get frame to be encoded ------------------------- */
					/* 4: get picture to encode */
						//fenc: frame being encoded
						//frames.current : frame to be encoded
						h->fenc = x264_frame_shift( h->frames.current );

					/* If applicable, wait for previous frame reconstruction to finish */
						if( h->reconfig ){
								x264_encoder_reconfig_apply( h, &h->reconfig_h->param );
								h->reconfig = 0;
							}

						if( h->fenc->param ){
								x264_encoder_reconfig_apply( h, h->fenc->param );
								if( h->fenc->param->param_free ){
									h->fenc->param->param_free( h->fenc->param );
									h->fenc->param = NULL;
								}
							}

					/* ------------------- Setup frame context ----------------------------- */
					/* 5: Init data dependent of frame type */
						//Frame type: IDR, I, P, BREF, B에 따라 초기화
						fenc => fdec

					/* ------------------- Init                ----------------------------- */
					/* build ref list 0/1 */
					x264_reference_build_list( h, h->fdec->i_poc );

					/* ---------------------- Write the bitstream -------------------------- */
					/* Init bitstream context */
					if( h->param.b_sliced_threads ) else

					if( h->param.b_aud )??

					if( h->param.b_intra_refresh )
						//I, P 일때 처리

					if( h->fenc->b_keyframe )
						/* Write SPS and PPS */
						if( h->param.b_repeat_headers )
							/* generate sequence parameters */
							 x264_nal_start( h, NAL_SPS, NAL_PRIORITY_HIGHEST );
							x264_sps_write( &h->out.bs, h->sps );
							if( x264_nal_end( h ) )
								return -1;

							/* Pad AUD/SPS to 256 bytes like Panasonic */

							/* generate picture parameters */
							x264_nal_start( h, NAL_PPS, NAL_PRIORITY_HIGHEST );
							x264_pps_write( &h->out.bs, h->sps, h->pps );
							if( x264_nal_end( h ) )
								return -1;

							/* when frame threading is used, buffering period sei is written in x264_encoder_frame_end */

					/* write extra sei */

					/* generate sei pic timing */

					/* Filler space: 10 or 18 SEIs' worth of space, depending on resolution */

					/* Init the rate control */
//초기 qpm 설정
					x264_ratecontrol_start( h, h->fenc->i_qpplus1, overhead*8 );
					i_global_qp = x264_ratecontrol_qp( h );

					/* ------------------------ Create slice header  ----------------------- */
					 x264_slice_init( h, i_nal_type, i_global_qp );

					/*------------------------- Weights -------------------------------------*/

					  if( h->sh.i_type == SLICE_TYPE_B )
						x264_macroblock_bipred_init( h );

					x264_weighted_pred_init( h );

//여기서 x264_slices_write call
//x264_slices_write 안에서 다시 slice_write call
					/* Write frame */
					h->i_threadslice_start = 0;
					h->i_threadslice_end = h->mb.i_mb_height;

					if( h->i_thread_frames > 1 )
					{
						x264_threadpool_run( h->threadpool, (void*)x264_slices_write, h );
						h->b_thread_active = 1;
					}
					else if( h->param.b_sliced_threads )
					{
						if( x264_threaded_slices_write( h ) )
							return -1;
					}
					else
						if( (intptr_t)x264_slices_write( h ) )
							return -1;

					return x264_encoder_frame_end( thread_oldest, thread_current, pp_nal, pi_nal, pic_out );

					//
x264_slices_write	static void *x264_slices_write( x264_t *h )
					
					int i_slice_num = 0;
					int last_thread_mb = h->sh.i_last_mb;
											/* init stats */
					memset( &h->stat.frame, 0, sizeof(h->stat.frame) );
					h->mb.b_reencode_mb = 0;

//frame 안에 있는 여러개 slices 차례대로 불러들이기 위한 것
//현재 우리 코딩에서는 한번 밖에 안돌아감...왜???
					while( h->sh.i_first_mb + SLICE_MBAFF*h->mb.i_mb_stride <= last_thread_mb )
					{   
						h->sh.i_last_mb = last_thread_mb;

						if( !i_slice_num || !x264_frame_new_slice( h, h->fdec ) )
						{	
							//들어오지만 처리x
							if( h->param.i_slice_max_mbs )
							else if( h->param.i_slice_count && !h->param.b_sliced_threads )
						}

						h->sh.i_last_mb = X264_MIN( h->sh.i_last_mb, last_thread_mb );

//x264_slice_write		if( x264_stack_align( x264_slice_write, h ) )
							//안들어감
							goto fail;

						h->sh.i_first_mb = h->sh.i_last_mb + 1;
						// if i_first_mb is not the last mb in a row then go to the next mb in MBAFF order
						if( SLICE_MBAFF && h->sh.i_first_mb % h->mb.i_mb_width )
							h->sh.i_first_mb -= h->mb.i_mb_stride;
					}
					return (void *)0;

					fail:
						/* Tell other threads we're done, so they wouldn't wait for it */
						if( h->param.b_sliced_threads )
							x264_threadslice_cond_broadcast( h, 2 );
						return (void *)-1;
					}  